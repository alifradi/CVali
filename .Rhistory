acf(z)
# Simulate an AR model with 0.5 slope
x <- arima.sim(model = list(ar = 0.5), n = 100)
# Simulate an AR model with 0.9 slope
y <- arima.sim(model = list(ar = 0.9), n = 100)
# Simulate an AR model with -0.75 slope
z <- arima.sim(model = list(ar = -0.75), n = 100)
# Plot your simulated data
plot.ts(cbind(x, y, z))
# Simulate an AR model with 0.5 slope
x <- arima.sim(model = list(ar = 0.5), n = 100)
# Simulate an AR model with 0.9 slope
y <- arima.sim(model = list(ar = 0.9), n = 100)
# Simulate an AR model with -0.75 slope
z <- arima.sim(model = list(ar = -0.75), n = 100)
# Plot your simulated data
plot.ts(cbind(x, y, z))
x
x
# Calculate the ACF for x
acf(x)
# Calculate the ACF for y
acf(y)
# Calculate the ACF for z
acf(z)
# Simulate and plot AR model with slope 0.9
x <- arima.sim(model = list(ar = 0.9), n = 200)
ts.plot(x)
acf(x)
# Simulate and plot AR model with slope 0.98
y <- arima.sim(model = list(ar = 0.98), n = 200)
ts.plot(y)
acf(y)
# Simulate and plot RW model
z <- arima.sim(model = list(order=c(0,1,0)), n = 200)
ts.plot(z)
acf(z)
# Fit the AR model to x
arima(x, order = c(1, 0, 0))
# Copy and paste the slope (ar1) estimate
0.8575
# Copy and paste the slope mean (intercept) estimate
-0.0948
# Copy and paste the innovation variance (sigma^2) estimate
1.022
# Fit the AR model to AirPassengers
AR <- arima(AirPassengers, order = c(1, 0, 0))
print(AR)
# Run the following commands to plot the series and fitted values
ts.plot(AirPassengers)
AR_fitted <- AirPassengers - residuals(AR)
points(AR_fitted, type = "l", col = 2, lty = 2)
# Fit an AR model to Nile
AR_fit <- arima(Nile, order = c(1,0,0))
print(AR_fit)
# Use predict() to make a 1-step forecast
predict_AR <- predict(AR_fit)
# Obtain the 1-step forecast using $pred[1]
predict_AR$pred[1]
# Use predict to make 1-step through 10-step forecasts
predict(AR_fit, n.ahead = 10)
# Run to plot the Nile series plus the forecast and 95% prediction intervals
ts.plot(Nile, xlim = c(1871, 1980))
AR_forecast <- predict(AR_fit, n.ahead = 10)$pred
AR_forecast_se <- predict(AR_fit, n.ahead = 10)$se
points(AR_forecast, type = "l", col = 2)
points(AR_forecast - 2*AR_forecast_se, type = "l", col = 2, lty = 2)
points(AR_forecast + 2*AR_forecast_se, type = "l", col = 2, lty = 2)
# Generate MA model with slope 0.5
x <- arima.sim(model = list(ma = 0.5), n = 100)
# Generate MA model with slope 0.9
y <- arima.sim(model = list(ma = 0.9), n = 100)
# Generate MA model with slope -0.5
z <- arima.sim(model = list(ma = -0.5), n = 100)
# Plot all three models together
plot.ts(cbind(x, y, z))
# Calculate ACF for x
acf(x)
# Calculate ACF for y
acf(y)
# Calculate ACF for z
acf(z)
# Fit the MA model to `x`
arima(x, order = c(0, 0, 1))
# Paste the slope (ma1) estimate below
0.7928
# Paste the slope mean (intercept) estimate below
0.1589
# Paste the innovation variance (sigma^2) estimate below
0.9576
# Fit the MA model to Nile
MA <- arima(Nile, order = c(0, 0, 1))
print(MA)
# Plot Nile and MA_fit
ts.plot(Nile)
MA_fit <- Nile - resid(MA)
points(MA_fit, type = "l", col = 2, lty = 2)
# Make a 1-step forecast based on MA
predict_MA <- predict(MA)
# Obtain the 1-step forecast using $pred[1]
predict_MA$pred[1]
# Make a 1-step through 10-step forecast based on MA
predict(MA, n.ahead = 10)
# Plot the Nile series plus the forecast and 95% prediction intervals
ts.plot(Nile, xlim = c(1871, 1980))
MA_forecasts <- predict(MA, n.ahead = 10)$pred
MA_forecast_se <- predict(MA, n.ahead = 10)$se
points(MA_forecasts, type = "l", col = 2)
points(MA_forecasts - 2*MA_forecast_se, type = "l", col = 2, lty = 2)
points(MA_forecasts + 2*MA_forecast_se, type = "l", col = 2, lty = 2)
# Find correlation between AR_fit and MA_fit
cor(AR_fit, MA_fit)
AR_fit
AR_fit
MA_fit<- c(932.2287,987.2191,983.9983,911.3638 1032.1935,967.5890,992.0276
MA_fit<- c(932.2287,987.2191,983.9983,911.3638,1032.1935,967.5890,992.0276
, 851.5214,1062.4131,1035.5964,958.7368,932.9609,920.0147,991.1104
,920.3364,956.9438,920.3994,1017.4442,836.6109,965.1620,985.3805
,962.6012,1012.8286,971.1321,1024.7326,1008.2396,999.3474,930.8385
, 983.2332,840.0952,919.2073,902.1424,840.5078,956.8789,872.3828
, 854.4132,942.5402,824.4697,993.2079,940.7265,929.9386,881.8172
, 860.3013,766.3055,941.0678,828.8095 1029.3940,945.9520,876.1379
MA_fit<- c(932.2287,987.2191,983.9983,911.3638,1032.1935,967.5890,992.0276
, 851.5214,1062.4131,1035.5964,958.7368,932.9609,920.0147,991.1104
,920.3364,956.9438,920.3994,1017.4442,836.6109,965.1620,985.3805
,962.6012,1012.8286,971.1321,1024.7326,1008.2396,999.3474,930.8385
, 983.2332,840.0952,919.2073,902.1424,840.5078,956.8789,872.3828
, 854.4132,942.5402,824.4697,993.2079,940.7265,929.9386,881.8172
, 860.3013,766.3055,941.0678,828.8095,1029.3940,945.9520,876.1379
, 876.8241,898.1263,870.0195,909.7790,901.9262,904.1402,841.2652
, 920.6561,852.4184,897.9015,972.9959,838.2936,897.5705,906.9227
, 895.8194,937.4689,936.8450,904.1709,888.1600,965.3326,845.7318
, 855.0377,841.3040,921.0197,878.0037,867.7963,893.9758,974.4809
, 875.9378,918.5103,892.5709,918.2708,853.3207,879.7812,903.4385
, 974.6842,897.8010,952.6070,860.3808,942.9307,931.3744,875.2216
, 974.0097,893.5168,922.0740 1013.0280,881.0268,868.1658,938.4727
MA_fit<- c(932.2287,987.2191,983.9983,911.3638,1032.1935,967.5890,992.0276
, 851.5214,1062.4131,1035.5964,958.7368,932.9609,920.0147,991.1104
,920.3364,956.9438,920.3994,1017.4442,836.6109,965.1620,985.3805
,962.6012,1012.8286,971.1321,1024.7326,1008.2396,999.3474,930.8385
, 983.2332,840.0952,919.2073,902.1424,840.5078,956.8789,872.3828
, 854.4132,942.5402,824.4697,993.2079,940.7265,929.9386,881.8172
, 860.3013,766.3055,941.0678,828.8095,1029.3940,945.9520,876.1379
, 876.8241,898.1263,870.0195,909.7790,901.9262,904.1402,841.2652
, 920.6561,852.4184,897.9015,972.9959,838.2936,897.5705,906.9227
, 895.8194,937.4689,936.8450,904.1709,888.1600,965.3326,845.7318
, 855.0377,841.3040,921.0197,878.0037,867.7963,893.9758,974.4809
, 875.9378,918.5103,892.5709,918.2708,853.3207,879.7812,903.4385
, 974.6842,897.8010,952.6070,860.3808,942.9307,931.3744,875.2216
, 974.0097,893.5168,922.0740,1013.0280,881.0268,868.1658,938.4727
, 835.8436,873.1527)
AR_fit <- c(
947.1534,1021.0418,1041.2928,941.5568,1066.6065,1041.2928,1041.2928
,865.6156,1076.7320,1147.6104,1031.1673,957.7576,927.3811,1015.9791
,957.2513,970.4144,940.0379,1051.4183,858.5278,939.0254,1031.1673
,1010.9164,1066.6065,1036.2301,1086.8575,1091.9203,1071.6693,975.4772
,1010.9164,845.8709,879.2850,896.4984,805.3690,929.9125,875.7411
,808.9129,917.7619,804.3564,970.4144,985.6026,944.5944,874.7286
,821.5697,684.8757,871.1846,809.4192,1021.0418,1010.9164,875.2348
,840.8082,869.6658,842.8333,881.8164,891.4356,890.4231,807.3941
,881.8164,830.6827,857.0090,980.5399,838.2768,849.4148,891.9419
,881.8164,931.9376,952.1885,908.1427,870.1721,965.3517,844.3521
,796.2560,782.5866,882.3227,865.1093,829.6701,859.5403,980.5399
,889.4105,896.4984,883.3352,904.5987,830.6827,833.2141,878.2725
,985.6026,918.7744,953.2011,857.5152,921.3058,947.6321,866.6282
,970.4144,912.6991,910.1678,1046.3556,915.7368,831.6952,919.2807
,817.5195,815.4945
)
AR_fit <- ts(AR_fit,start = 1871, end = 1970, frequency = 1)
MA_fit<- c(932.2287,987.2191,983.9983,911.3638,1032.1935,967.5890,992.0276
, 851.5214,1062.4131,1035.5964,958.7368,932.9609,920.0147,991.1104
,920.3364,956.9438,920.3994,1017.4442,836.6109,965.1620,985.3805
,962.6012,1012.8286,971.1321,1024.7326,1008.2396,999.3474,930.8385
, 983.2332,840.0952,919.2073,902.1424,840.5078,956.8789,872.3828
, 854.4132,942.5402,824.4697,993.2079,940.7265,929.9386,881.8172
, 860.3013,766.3055,941.0678,828.8095,1029.3940,945.9520,876.1379
, 876.8241,898.1263,870.0195,909.7790,901.9262,904.1402,841.2652
, 920.6561,852.4184,897.9015,972.9959,838.2936,897.5705,906.9227
, 895.8194,937.4689,936.8450,904.1709,888.1600,965.3326,845.7318
, 855.0377,841.3040,921.0197,878.0037,867.7963,893.9758,974.4809
, 875.9378,918.5103,892.5709,918.2708,853.3207,879.7812,903.4385
, 974.6842,897.8010,952.6070,860.3808,942.9307,931.3744,875.2216
, 974.0097,893.5168,922.0740,1013.0280,881.0268,868.1658,938.4727
, 835.8436,873.1527)
MA_fit <- ts(MA_fit,start = 1871, end = 1970, frequency = 1)
# Find correlation between AR_fit and MA_fit
cor(AR_fit, MA_fit)
# Find AIC of AR
AIC(AR)
# Find AIC of MA
AIC(MA)
# Find BIC of AR
BIC(AR)
# Find BIC of MA
BIC(MA)
runApp('C:/Users/Ali/Desktop/axefinance/apps/app/CRISP-DM framework.R')
runApp('C:/Users/Ali/Desktop/axefinance/apps/app/CRISP-DM framework.R')
library(tidyverse) # Main Package - Loads dplyr, purrr
library(rvest)     # HTML Hacking & Web Scraping
library(furrr)     # Parallel Processing using purrr (iteration)
library(fs)        # Working with File System
library(xopen)     # Quickly opening URLs
# 2.1 COLLECT BIKE PRODUCT FAMILIES ----
url <- "https://www.cannondale.com/en/USA/Products/ProductCategory.aspx?nid=d785e3b8-7c0e-4145-9713-6023539b88fa"
xopen(url)
library(usethis)
use_git_config(user.name = "alifradi", user.email = "alifradi7@gmail.com")
install.packages(c("arm", "arules", "backports", "biganalytics", "biglm", "broom", "Cairo", "car", "carData", "coin", "colourvalues", "d3r", "dbplyr", "DescTools", "devtools", "dplyr", "DT", "eeptools", "ellipse", "ellipsis", "ff", "GGally", "ggplot2", "ggpubr", "git2r", "glue", "gtools", "haven", "Hmisc", "httpuv", "igraph", "insight", "ipred", "isoband", "ISOcodes", "ISwR", "jsonify", "keras", "kernlab", "klaR", "labelled", "later", "lattice", "latticeExtra", "lava", "lavaan", "lme4", "lmtest", "lubridate", "lwgeom", "mapdeck", "maptools", "MASS", "mda", "mice", "missMDA", "modelr", "modeltools", "multcomp", "mvtnorm", "nlme", "nloptr", "numDeriv", "officer", "openxlsx", "padr", "pamr", "party", "pillar", "pkgbuild", "pkgload", "PKI", "plotly", "plotmo", "plotrix", "pls", "plyr", "pmml", "polspline", "pROC", "prodlim", "profileModel", "prophet", "proxy", "ps", "purrr", "quadprog", "quantreg", "questionr", "randomForest", "RANN", "raster", "rattle", "RcppArmadillo", "Rcsdp", "RCurl", "recipes", "registry", "rematch2", "reshape2", "reticulate", "rex", "rgl", "rmarkdown", "rms", "ROCR", "roxygen2", "rsample", "Rtsne", "RUnit", "rversions", "sandwich", "scales", "scorecard", "sem", "seriation", "sf", "sfheaders", "sfsmisc", "shiny", "sjlabelled", "sjmisc", "slider", "snow", "SnowballC", "sp", "sparklyr", "SparkR", "spls", "SQUAREM", "StanHeaders", "stopwords", "strucchange", "subselect", "systemfonts", "tables", "TeachingDemos", "tensorflow", "testthat", "textdata", "TH.data", "tibble", "tidyr", "tidyselect", "tidytext", "timetk", "tinytex", "TSP", "usethis", "vcd", "vctrs", "withr", "xfun", "xml2", "zoo"))
library(shiny); runApp('C:/Users/Ali/Desktop/axefinance/apps/app/CRISP-DM framework.R')
shiny::runApp('C:/Users/Ali/Desktop/generateCode')
# Run the application
shinyApp(ui = ui, server = server)
runApp('C:/Users/Ali/Desktop/generateCode/inputs.R')
install.packages("printr")
install.packages("broom")
install.packages("coro")
install.packages("coro")
detach("package:datasets", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:methods", unload = TRUE)
detach("package:stats", unload = TRUE)
detach("package:utils", unload = TRUE)
detach("package:base", unload = TRUE)
install.packages(c("broom", "cli", "data.table", "Deriv", "digest", "ggsignif", "glmnet", "htmltools", "insight", "ISOcodes", "kableExtra", "lifecycle", "pillar", "pkgload", "quantreg", "questionr", "Rcpp", "RcppParallel", "Rdpack", "renv", "rgl", "rlang", "rmarkdown", "robustbase", "rsample", "sfheaders", "slam", "SparseM", "StanHeaders", "stars", "statmod", "statnet.common", "stopwords", "stringi", "superpc", "survival", "sys", "systemfonts", "syuzhet", "tables", "testthat", "tibble", "tidygeocoder", "tidyquant", "tidyr", "tidytext", "tiff", "timetk", "tinytex", "tm", "tmap", "tmaptools", "topicmodels", "tseries", "TTR", "usethis", "V8", "vcd", "vctrs", "VGAM", "VIM", "vroom", "warp", "webdriver", "withr", "xts", "zip", "ztable"))
install.packages("C:/Users/Ali/Downloads/torch_0.2.1.zip", repos = NULL, type = "win.binary")
library(torch)
install_torch()
library(torch)
??torch
(corpus_l <- list(man_comes_around = "There's a man goin' 'round takin' names",
wont_back_down = "Well I won't back down, no I won't back down",
bird_on_a_wire = "Like a bird on a wire"))
(corpus_c <- unlist(corpus_l))
# Data frame
(corpus_d <- data.frame(doc_id = names(corpus_c), text = unname(corpus_c),
stringsAsFactors = FALSE))
## ------------------------------------------------------------------------
library(tokenizers)
tokens_l <- tokenize_ngrams(corpus_l, n = 2)
tokens_c <- tokenize_ngrams(corpus_c, n = 2)
tokens_d <- tokenize_ngrams(corpus_c, n = 2)
# Are all these identical?
all(identical(tokens_l, tokens_c),
identical(tokens_c, tokens_d),
identical(tokens_l, tokens_d))
## ------------------------------------------------------------------------
tokens_l
sample_tokens_df <- structure(list(doc_id = c("man_comes_around", "man_comes_around",
"man_comes_around", "man_comes_around", "man_comes_around", "man_comes_around",
"wont_back_down", "wont_back_down", "wont_back_down", "wont_back_down",
"wont_back_down", "wont_back_down", "wont_back_down", "wont_back_down",
"wont_back_down", "bird_on_a_wire", "bird_on_a_wire", "bird_on_a_wire",
"bird_on_a_wire", "bird_on_a_wire"), token = c("there's a", "a man",
"man goin", "goin round", "round takin", "takin names", "well i",
"i won't", "won't back", "back down", "down no", "no i", "i won't",
"won't back", "back down", "like a", "a bird", "bird on", "on a",
"a wire")), .Names = c("doc_id", "token"), row.names = c(NA,
-20L), class = "data.frame")
head(sample_tokens_df, 10)
library(reticulate)
repl_python()
import pandas as pd
1+8
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
textInput("element", "Watch what happens to me")
),
server = function(input, output) {
observeEvent(input$btn, {
# Run a simply shinyjs function
toggle("element")
})
}
)
}
library(shinyjs)
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
textInput("element", "Watch what happens to me")
),
server = function(input, output) {
observeEvent(input$btn, {
# Run a simply shinyjs function
toggle("element")
})
}
)
}
?toggle
if (interactive()) {
shinyApp(
ui = fluidPage(
useShinyjs(),
inlineCSS(list(.red = "background: red")),
checkboxInput("checkbox", "Make it red"),
p(id = "element", "Watch what happens to me")
),
server = function(input, output) {
observe({
toggleClass(id = "element", class = "red",
condition = input$checkbox)
})
}
)
}
if (interactive()) {
shinyApp(
ui = fluidPage(
useShinyjs(),
inlineCSS(list(.red = "background: red")),
checkboxInput("checkbox", "Make it red"),
p(id = "element", "Watch what happens to me")
),
server = function(input, output) {
observe({
toggleClass(id = "element", class = "red",
condition = input$checkbox)
})
}
)
}
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
alert(paste0("The date is ", date()))
})
}
)
}
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
# Add a CSS class for red text colour
inlineCSS(list(.red = "background: red")),
actionButton("btn", "Click me"),
p(id = "element", "Watch what happens to me")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
toggleClass("element", "red")
})
}
)
}
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),
p(id = "text", "This text will disappear after 3 seconds"),
actionButton("close", "Close the app in half a second")
),
server = function(input, output) {
delay(3000, hide("text"))
observeEvent(input$close, {
delay(500, stopApp())
})
}
)
}
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),
p(id = "text", "This text will disappear after 3 seconds"),
actionButton("close", "Close the app in half a second")
),
server = function(input, output) {
delay(3000, hide("text"))
observeEvent(input$close, {
delay(500, stopApp())
})
}
)
}
if (interactive()) {
shinyApp(
ui = fluidPage(
useShinyjs(),
textInput("text", "Please type at least 3 characters"),
actionButton("element", "Submit")
),
server = function(input, output) {
observe({
toggleState(id = "element", condition = nchar(input$text) >= 3)
})
}
)
}
if (interactive()) {
shinyApp(
ui = fluidPage(
useShinyjs(),
textInput("text", "Please type at least 3 characters"),
actionButton("element", "Submit")
),
server = function(input, output) {
observe({
toggleState(id = "element", condition = nchar(input$text) >= 3)
})
}
)
}
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
disabled(
textInput("element", NULL, "I was born disabled")
)
),
server = function(input, output) {
observeEvent(input$btn, {
enable("element")
})
}
)
}
library(shiny)
disabled(numericInput("num", NULL, 5), dateInput("date", NULL))
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
disabled(
textInput("element", NULL, "I was born disabled")
)
),
server = function(input, output) {
observeEvent(input$btn, {
enable("element")
})
}
)
}
library(shiny)
disabled(numericInput("num", NULL, 5), dateInput("date", NULL))
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
p(id = "element", "Watch what happens to me")
),
server = function(input, output) {
observeEvent(input$btn, {
# Change the following line for more examples
html("element", paste0("The date is ", date()))
})
}
)
}
devtools::install_github("business-science/portfoliodown")
library(devtools)
install.packages("devtools")
devtools::install_github("business-science/portfoliodown")
library(portfoliodown)
getwd()
setwd("D:/Maitrise ALI")
new_portfolio_site()
setwd("D:/Maitrise ALI/portfolio")
new_portfolio_site()
serve_site()
serve_site()
serve_site()
serve_site()
serve_site()
# An optional custom script to run after Hugo builds your site.
# First, execute the global .Rprofile if it exists. You may configure blogdown
# options there, too, so they apply to any blogdown projects. Feel free to
# ignore this part if it sounds too complicated to you.
if (file.exists("~/.Rprofile")) {
base::sys.source("~/.Rprofile", envir = environment())
}
# Now set options to customize the behavior of blogdown for this project. Below
# are a few sample options; for more options, see
# https://bookdown.org/yihui/blogdown/global-options.html
options(
# to automatically serve the site on RStudio startup, set this option to TRUE
blogdown.serve_site.startup = FALSE,
# to disable knitting Rmd files on save, set this option to FALSE
blogdown.knit.on_save = TRUE,
# build .Rmd to .html (via Pandoc); to build to Markdown, set this option to 'markdown'
blogdown.method = 'html'
)
# fix Hugo version
options(blogdown.hugo.version = "0.91.2")
